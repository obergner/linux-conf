" Required by Vundle 
set nocompatible
filetype off 

" Vundle setup BEGIN
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle
" required! 
Plugin 'gmarik/Vundle.vim'

" Plugins to install:

" original repos on github
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-endwise'
Plugin 'lucapette/vim-ruby-doc'
Plugin 'vim-ruby/vim-ruby'
Plugin 'scrooloose/nerdtree'
Plugin 'jakar/vim-json'
Plugin 'kien/rainbow_parentheses.vim'
Plugin 'guns/vim-clojure-static'
Plugin 'fatih/vim-go'
Plugin 'scrooloose/syntastic'
Plugin 'marijnh/tern_for_vim'
Plugin 'maciakl/vim-neatstatus'
" Plugin 'Valloric/YouCompleteMe'
Plugin 'majutsushi/tagbar'
" Plugin 'rhysd/vim-clang-format'
" Plugin 'rdnetto/YCM-Generator'
" Plugin 'vivien/vim-addon-linux-coding-style'
Plugin 'Matt-Deacalion/vim-systemd-syntax'

" vim-scripts repos
Plugin 'vim-scripts/paredit.vim'
Plugin 'vim-scripts/bash-support.vim'
Plugin 'vim-scripts/CRefVim'
Plugin 'vim-scripts/c.vim'

call vundle#end()
" Vundle setup END

" Encoding setup BEGIN
" set UTF-8 encoding
set enc=utf-8
set fenc=utf-8
set termencoding=utf-8
" Encoding setup END

" enable automatically formatting files
filetype plugin indent on

" Suppress that noise
set noerrorbells

" Configure search
set incsearch
set hlsearch

" Showline numbers
set number

set title

" Configure indentation
set autoindent

set modeline
set modelines=4

set showmatch
set showmode

" Tabs: follow linux kernel formatting rules
set tabstop=8
set shiftwidth=8
set softtabstop=8
set noexpandtab

" this enables 'visual' wrapping
set wrap

" this turns off physical line wrapping (ie: automatic insertion of newlines)
set textwidth=0 wrapmargin=0

set ruler

" set the search scan so that it ignores case when the search is all lower
" case but recognizes uppercase if it's specified
set ignorecase
set smartcase

" show current command (leader key, etc) in lower right
set showcmd

" scroll when 4 lines from top or bottom
set scrolloff=4

" Experimenting with limiting maximum line
" wrap lines at 120 chars. 80 is somewaht antiquated with nowadays displays.
set textwidth=120
set colorcolumn=120
highlight ColorColumn ctermbg=darkgray

" CTAGS
set tags=./tags;/,tags;./.tags;/,.tags;/

" Put all those backup and swp files into a dedicated directory
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" enable syntax highlighting
syntax on

" Configure color scheme
" colorscheme sand
colorscheme zenburn

" choose a decent programming font
set guifont=Inconsolata:h18

" Configure syntastic BEGIN
" tell syntastic to always update location list with list of detected errors, not waiting
" for command :Errors to be executed
let g:syntastic_always_populate_loc_list = 1
" tell syntastic to not report angularjs attributes as errors
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
" Configure syntastic END

" Configure ruby BEGIN
" configure vim-ruby-doc to use proper open command on mac os x
let g:ruby_doc_command='open'
" Configure ruby END

" Configure UtilSnips BEGIN
" Put directory holding custom snippets on UltiSnips search path - take care to put
" own snippets BEFORE snippets shipped with UltiSnips
let g:UltiSnipsSnippetDirectories = ["custom/ultisnippets", "UltiSnips"]
let g:UltiSnipsDontReverseSearchPath = 1
" Configure UtilSnips END

" Configure YCM BEGIN
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
" Configure YCM END

" Enable paredit mode supporting clojure/lisp
let g:paredit_mode = 1

" Map leader to ",", as often recommended
let mapleader = ","

" Map localleader to "\"
let maplocalleader = "\\"

" tell vim-ruby about the ruby interpreter to use
autocmd FileType ruby compiler ruby

" Automaticall reload .vimrc if changed
au! BufWritePost ~/.vim/vimrc source %

" Configure Go support: fatih/vim-go
" These are (mostly) default settings
let g:go_play_open_browser = 1
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = "gofmt" " or goimports
let g:go_fmt_autosave = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" Configure javascript support
autocmd FileType javascript inoremap (; ();<Esc>hi
autocmd FileType javascript inoremap {<CR> {<CR>}<Esc><S-o>

" always show status line, even if only one window
set laststatus=2

" Configure Tagbar BEGIN
let g:tagbar_width = 70
" Configure Tagbar END

" Configure clang-format BEGIN
" see: https://github.com/rhysd/vim-clang-format
let g:clang_format#code_style = "google" " one of llvm, google, chromium, webkit, mozilla
let g:clang_format#detect_style_file = 1 " auto detect .clang_format file
let g:clang_format#auto_format = 1       " format on save
let g:clang_format#auto_format_on_insert_leave = 0 " format inserted lines on insert leave
let g:clang_format#auto_formatexpr = 0   " automatically set vim's formatexp, i.e. make vim use clang-format's format
" Configure clang-format END

" Configure NERDTree BEGIN
" automatically open file explorer on startup if no file given
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
" close vim if the only open window left is a nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" Increase width of NERDTree file browser window
let NERDTreeWinSize = 60
" and show hidden files by default
let NERDTreeShowHidden = 1
" Configure NERDTree END

" Let vim optionally read additional/overriding settings from the current working directory
" but DO NOT allow executing shell command et alii from local .vimrc files
set exrc
" set secure " We need to disable this if we want to use autocmd

